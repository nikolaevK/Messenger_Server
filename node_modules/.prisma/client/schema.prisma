datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "darwin", "darwin-arm64", "debian-openssl-3.0.x"]
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  image         String    @unique
  // Linking User to the ConversationParticipant
  conversations ConversationParticipant[] @relation("UserID")//user can have many conversations
  imagesParticipant       ConversationParticipant[] @relation("ParticipantImageURL")
  imagesMessage Message[]   @relation("MessageImageURL")
  messages      Message[]
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  messages        Message[]
  // Linking Conversation to the ConversationParticipant
  participants    ConversationParticipant[] // Conversation can have many participants
  latestMessageId String?  @unique
  // One to One relationship
  // need a unique name because more than one relationship is defined
  latestMessage   Message? @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt 
}

model ConversationParticipant {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                String
  // Link userId on ConversationParticipant to the id of User model by using @relation function
  user                  User    @relation("UserID",fields: [userId], references: [id])
  imageUrl              String 
  userURL               User    @relation("ParticipantImageURL", fields: [imageUrl], references: [image])
  conversationId        String
  // Link userId on ConversationParticipant to the id of Conversation model by using @relation function
  conversation          Conversation @relation(fields: [conversationId], references: [id])
  hasSeenLatestMessage  Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt 
}

model Message {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    conversationId    String
    // Link conversationId on Message to the id of Conversation model by using @relation function
    conversation      Conversation @relation(fields: [conversationId], references: [id])
    senderId          String
    // Link senderId on Message to the id of User model by using @relation function
    sender            User @relation(fields: [senderId], references: [id])
    imageUrl          String 
    userURL           User    @relation("MessageImageURL", fields: [imageUrl], references: [image])
    body              String
    isLatestIn        Conversation? @relation(name: "latestConversationMessage")
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt 
}